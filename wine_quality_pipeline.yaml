# PIPELINE DEFINITION
# Name: wine-quality-end-to-end-pipeline-v5
# Inputs:
#    cd_trigger_id: str [Default: 'deploy-wine-app-trigger']
#    data_bucket: str [Default: 'yannick-wine-data']
#    model_bucket: str [Default: 'yannick-wine-models']
#    project_id: str [Default: 'data-engineering-vm']
components:
  comp-condition-1:
    dag:
      tasks:
        trigger-cd-pipeline:
          cachingOptions:
            enableCache: true
          componentRef:
            name: comp-trigger-cd-pipeline
          inputs:
            parameters:
              best_model_name:
                runtimeValue:
                  constant: best-model
              new_model_uri:
                componentInputParameter: pipelinechannel--model-evaluator-best_model_uri
              project_id:
                componentInputParameter: pipelinechannel--project_id
              trigger_id:
                componentInputParameter: pipelinechannel--cd_trigger_id
          taskInfo:
            name: trigger-cd-pipeline
    inputDefinitions:
      parameters:
        pipelinechannel--cd_trigger_id:
          parameterType: STRING
        pipelinechannel--model-evaluator-best_model_uri:
          parameterType: STRING
        pipelinechannel--model-evaluator-decision:
          parameterType: STRING
        pipelinechannel--project_id:
          parameterType: STRING
  comp-data-ingestion:
    executorLabel: exec-data-ingestion
    inputDefinitions:
      parameters:
        blob_name:
          parameterType: STRING
        bucket_name:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        raw_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-model-evaluator:
    executorLabel: exec-model-evaluator
    inputDefinitions:
      artifacts:
        decision_tree_model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
        linear_regression_model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
        logistic_regression_model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
        testing_data:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
      parameters:
        model_bucket_name:
          parameterType: STRING
        prod_model_blob:
          parameterType: STRING
    outputDefinitions:
      parameters:
        best_model_uri:
          parameterType: STRING
        decision:
          parameterType: STRING
  comp-train-model:
    executorLabel: exec-train-model
    inputDefinitions:
      artifacts:
        training_data:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
      parameters:
        image:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
  comp-train-model-2:
    executorLabel: exec-train-model-2
    inputDefinitions:
      artifacts:
        training_data:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
      parameters:
        image:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
  comp-train-model-3:
    executorLabel: exec-train-model-3
    inputDefinitions:
      artifacts:
        training_data:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
      parameters:
        image:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
  comp-train-test-splitter:
    executorLabel: exec-train-test-splitter
    inputDefinitions:
      artifacts:
        input_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        testing_data:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        training_data:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-trigger-cd-pipeline:
    executorLabel: exec-trigger-cd-pipeline
    inputDefinitions:
      parameters:
        best_model_name:
          parameterType: STRING
        new_model_uri:
          parameterType: STRING
        project_id:
          parameterType: STRING
        trigger_id:
          parameterType: STRING
deploymentSpec:
  executors:
    exec-data-ingestion:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - data_ingestion
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.14.6'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef data_ingestion(\n    bucket_name: str,\n    blob_name: str,\n\
          ) -> NamedTuple(\"outputs\", [(\"raw_dataset\", Dataset)]):\n    \"\"\"\
          Downloads data from GCS and outputs it as a KFP Dataset Artifact.\"\"\"\n\
          \    return ContainerSpec(\n        image='europe-west4-docker.pkg.dev/data-engineering-vm/yannick-wine-repo/data-ingestion:latest',\n\
          \        command=[\"python3\", \"component.py\"],\n        args=[\n    \
          \        \"--bucket-name\", bucket_name,\n            \"--blob-name\", blob_name,\n\
          \            \"--output-dataset-path\", dsl.OutputPath(\"raw_dataset\"),\n\
          \        ],\n    )\n\n"
        image: python:3.9
    exec-model-evaluator:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - model_evaluator
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.14.6'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef model_evaluator(\n    testing_data: Input[Dataset],\n    decision_tree_model:\
          \ Input[Model],\n    linear_regression_model: Input[Model],\n    logistic_regression_model:\
          \ Input[Model],\n    model_bucket_name: str,\n    prod_model_blob: str,\n\
          ) -> NamedTuple(\"outputs\", [(\"decision\", str), (\"best_model_uri\",\
          \ str)]):\n    \"\"\"\n    Evaluates trained models against each other and\
          \ the production model.\n    Outputs a decision ('deploy_new' or 'keep_old')\
          \ and the best model's URI.\n    \"\"\"\n    return ContainerSpec(\n   \
          \     image='europe-west4-docker.pkg.dev/data-engineering-vm/yannick-wine-repo/model-evaluator:latest',\n\
          \        command=[\"python3\", \"component.py\"],\n        args=[\n    \
          \        \"--testing_data_path\",\n            dsl.InputPath(testing_data),\n\
          \            \"--decision_tree_model_path\",\n            dsl.InputPath(decision_tree_model),\n\
          \            \"--linear_regression_model_path\",\n            dsl.InputPath(linear_regression_model),\n\
          \            \"--logistic_regression_model_path\",\n            dsl.InputPath(logistic_regression_model),\n\
          \            \"--model_bucket_name\",\n            model_bucket_name,\n\
          \            \"--prod_model_blob\",\n            prod_model_blob,\n    \
          \        \"--decision\",\n            dsl.OutputPath(\"decision\"),\n  \
          \          \"--best_model_uri\",\n            dsl.OutputPath(\"best_model_uri\"\
          ),\n        ],\n    )\n\n"
        image: python:3.9
    exec-train-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.14.6'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_model(\n    image: str,\n    training_data: Input[Dataset]\n\
          ) -> NamedTuple(\"outputs\", [(\"model\", Model)]):\n    \"\"\"A generic\
          \ training component that accepts a specific container image.\"\"\"\n  \
          \  return ContainerSpec(\n        image=image,\n        command=[\"python3\"\
          , \"component.py\"],\n        args=[\n            \"--training_data_path\"\
          ,\n            dsl.InputPath(training_data),\n            \"--model_artifact_path\"\
          ,\n            dsl.OutputPath(\"model\"),\n        ],\n    )\n\n"
        image: python:3.9
    exec-train-model-2:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.14.6'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_model(\n    image: str,\n    training_data: Input[Dataset]\n\
          ) -> NamedTuple(\"outputs\", [(\"model\", Model)]):\n    \"\"\"A generic\
          \ training component that accepts a specific container image.\"\"\"\n  \
          \  return ContainerSpec(\n        image=image,\n        command=[\"python3\"\
          , \"component.py\"],\n        args=[\n            \"--training_data_path\"\
          ,\n            dsl.InputPath(training_data),\n            \"--model_artifact_path\"\
          ,\n            dsl.OutputPath(\"model\"),\n        ],\n    )\n\n"
        image: python:3.9
    exec-train-model-3:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.14.6'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_model(\n    image: str,\n    training_data: Input[Dataset]\n\
          ) -> NamedTuple(\"outputs\", [(\"model\", Model)]):\n    \"\"\"A generic\
          \ training component that accepts a specific container image.\"\"\"\n  \
          \  return ContainerSpec(\n        image=image,\n        command=[\"python3\"\
          , \"component.py\"],\n        args=[\n            \"--training_data_path\"\
          ,\n            dsl.InputPath(training_data),\n            \"--model_artifact_path\"\
          ,\n            dsl.OutputPath(\"model\"),\n        ],\n    )\n\n"
        image: python:3.9
    exec-train-test-splitter:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_test_splitter
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.14.6'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_test_splitter(\n    input_dataset: Input[Dataset]\n) ->\
          \ NamedTuple(\"outputs\", [(\"training_data\", Dataset), (\"testing_data\"\
          , Dataset)]):\n    \"\"\"Splits the input Dataset into training and testing\
          \ datasets.\"\"\"\n    return ContainerSpec(\n        image='europe-west4-docker.pkg.dev/data-engineering-vm/yannick-wine-repo/train-test-splitter:latest',\n\
          \        command=[\"python3\", \"component.py\"],\n        args=[\n    \
          \        \"--input-dataset-path\",\n            dsl.InputPath(input_dataset),\n\
          \            \"--training-data-path\",\n            dsl.OutputPath(\"training_data\"\
          ),\n            \"--testing-data-path\",\n            dsl.OutputPath(\"\
          testing_data\"),\n        ],\n    )\n\n"
        image: python:3.9
    exec-trigger-cd-pipeline:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - trigger_cd_pipeline
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.14.6'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef trigger_cd_pipeline(\n    project_id: str,\n    trigger_id: str,\n\
          \    new_model_uri: str,\n    best_model_name: str,\n):\n    \"\"\"Triggers\
          \ the Cloud Build deployment pipeline if a new model is promoted.\"\"\"\n\
          \    return ContainerSpec(\n        image='europe-west4-docker.pkg.dev/data-engineering-vm/yannick-wine-repo/trigger-cd:latest',\n\
          \        command=[\"python3\", \"component.py\"],\n        args=[\n    \
          \        \"--project-id\", project_id,\n            \"--trigger-id\", trigger_id,\n\
          \            \"--new-model-uri\", new_model_uri,\n            \"--best-model-name\"\
          , best_model_name,\n        ],\n    )\n\n"
        image: python:3.9
pipelineInfo:
  name: wine-quality-end-to-end-pipeline-v5
root:
  dag:
    tasks:
      condition-1:
        componentRef:
          name: comp-condition-1
        dependentTasks:
        - model-evaluator
        inputs:
          parameters:
            pipelinechannel--cd_trigger_id:
              componentInputParameter: cd_trigger_id
            pipelinechannel--model-evaluator-best_model_uri:
              taskOutputParameter:
                outputParameterKey: best_model_uri
                producerTask: model-evaluator
            pipelinechannel--model-evaluator-decision:
              taskOutputParameter:
                outputParameterKey: decision
                producerTask: model-evaluator
            pipelinechannel--project_id:
              componentInputParameter: project_id
        taskInfo:
          name: if-new-model-is-better
        triggerPolicy:
          condition: inputs.parameter_values['pipelinechannel--model-evaluator-decision']
            == 'deploy_new'
      data-ingestion:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-data-ingestion
        inputs:
          parameters:
            blob_name:
              runtimeValue:
                constant: raw/WineQT.csv
            bucket_name:
              componentInputParameter: data_bucket
        taskInfo:
          name: data-ingestion
      model-evaluator:
        cachingOptions: {}
        componentRef:
          name: comp-model-evaluator
        dependentTasks:
        - train-model
        - train-model-2
        - train-model-3
        - train-test-splitter
        inputs:
          artifacts:
            decision_tree_model:
              taskOutputArtifact:
                outputArtifactKey: model
                producerTask: train-model
            linear_regression_model:
              taskOutputArtifact:
                outputArtifactKey: model
                producerTask: train-model-2
            logistic_regression_model:
              taskOutputArtifact:
                outputArtifactKey: model
                producerTask: train-model-3
            testing_data:
              taskOutputArtifact:
                outputArtifactKey: testing_data
                producerTask: train-test-splitter
          parameters:
            model_bucket_name:
              componentInputParameter: model_bucket
            prod_model_blob:
              runtimeValue:
                constant: production_model/model.joblib
        taskInfo:
          name: model-evaluator
      train-model:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-model
        dependentTasks:
        - train-test-splitter
        inputs:
          artifacts:
            training_data:
              taskOutputArtifact:
                outputArtifactKey: training_data
                producerTask: train-test-splitter
          parameters:
            image:
              runtimeValue:
                constant: europe-west4-docker.pkg.dev/data-engineering-vm/yannick-wine-repo/model-trainer-dt:latest
        taskInfo:
          name: train-model
      train-model-2:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-model-2
        dependentTasks:
        - train-test-splitter
        inputs:
          artifacts:
            training_data:
              taskOutputArtifact:
                outputArtifactKey: training_data
                producerTask: train-test-splitter
          parameters:
            image:
              runtimeValue:
                constant: europe-west4-docker.pkg.dev/data-engineering-vm/yannick-wine-repo/model-trainer-lr:latest
        taskInfo:
          name: train-model-2
      train-model-3:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-model-3
        dependentTasks:
        - train-test-splitter
        inputs:
          artifacts:
            training_data:
              taskOutputArtifact:
                outputArtifactKey: training_data
                producerTask: train-test-splitter
          parameters:
            image:
              runtimeValue:
                constant: europe-west4-docker.pkg.dev/data-engineering-vm/yannick-wine-repo/model-trainer-logr:latest
        taskInfo:
          name: train-model-3
      train-test-splitter:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-test-splitter
        dependentTasks:
        - data-ingestion
        inputs:
          artifacts:
            input_dataset:
              taskOutputArtifact:
                outputArtifactKey: raw_dataset
                producerTask: data-ingestion
        taskInfo:
          name: train-test-splitter
  inputDefinitions:
    parameters:
      cd_trigger_id:
        defaultValue: deploy-wine-app-trigger
        isOptional: true
        parameterType: STRING
      data_bucket:
        defaultValue: yannick-wine-data
        isOptional: true
        parameterType: STRING
      model_bucket:
        defaultValue: yannick-wine-models
        isOptional: true
        parameterType: STRING
      project_id:
        defaultValue: data-engineering-vm
        isOptional: true
        parameterType: STRING
schemaVersion: 2.1.0
sdkVersion: kfp-2.14.6
