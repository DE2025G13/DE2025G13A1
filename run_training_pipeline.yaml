steps:
  - name: "gcr.io/cloud-builders/git"
    id: "FetchLatestDataset"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        git fetch origin dataset
        git checkout origin/dataset -- wine.csv test_wine_dataset.py
        echo "Current commit: ${COMMIT_SHA}"
        ls -la wine.csv test_wine_dataset.py
  - name: "python:3.9-slim"
    id: "ValidateDataset"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        pip install pandas pytest --break-system-packages
        pytest test_wine_dataset.py -v --tb=short
        if [ $? -ne 0 ]; then
          echo "Data validation failed! Stopping pipeline."
          exit 1
        fi
        echo "Data validation passed!"
    waitFor: ["FetchLatestDataset"]
  - name: "gcr.io/cloud-builders/gsutil"
    id: "UploadValidatedDataset"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        gsutil cp wine.csv gs://yannick-pipeline-root/datasets/wine-${COMMIT_SHA}.csv
        echo "Uploaded dataset for commit ${COMMIT_SHA}"
    waitFor: ["ValidateDataset"]
  - name: "gcr.io/cloud-builders/gsutil"
    id: "MarkAsSuccessful"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        echo "${COMMIT_SHA}" > last-successful-commit.txt
        gsutil cp last-successful-commit.txt gs://yannick-pipeline-root/datasets/last-successful-commit.txt
        echo "Marked ${COMMIT_SHA} as last successful dataset commit"
    waitFor: ["UploadValidatedDataset"]
  - name: "python:3.9-slim"
    id: "CompilePipeline"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        git fetch origin main
        git checkout origin/main -- pipeline.py
        pip install google-cloud-aiplatform kfp --break-system-packages
        python3 pipeline.py
    waitFor: ["MarkAsSuccessful"]
  - name: "python:3.9-slim"
    id: "RunTrainingPipeline"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        pip install 'google-cloud-aiplatform[pipelines]' --break-system-packages
        python3 -c "
        from google.cloud import aiplatform
        aiplatform.init(project='${PROJECT_ID}', location='europe-west4')
        job = aiplatform.PipelineJob(
            display_name='data-triggered-run-${SHORT_SHA}',
            template_path='wine_quality_pipeline_git_triggered.yaml',
            pipeline_root='gs://yannick-pipeline-root',
            enable_caching=False,
            parameter_values={
                'input_data_gcs_path': 'gs://yannick-pipeline-root/datasets/wine-${COMMIT_SHA}.csv'
            }
        )
        job.submit(service_account='793868790421-compute@developer.gserviceaccount.com')
        print(f'Pipeline submitted with dataset from commit: ${COMMIT_SHA}')
        "
    waitFor: ["CompilePipeline"]